<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
?>
<?php
    $stores = $this->getStores();
    $lines = $this->getLines();

?>
<div id="values">
    <table class="dynamic-grid">
        <col width="1" />
        <col width="/"/>
        <col width="1" />
        
        <?php foreach($stores as $store): ?>
                <col width="1" />
        <?php endforeach; ?>
        <thead align="center" >
        <tr>
            <td>Type</td>
            <td>Value</td>
            <td></td>
            <?php foreach($stores as $store): ?>
                <td><?=$store['website_name']?></td>
            <?php endforeach; ?>
            <td>Delete</td>
        </tr>
        </thead>
        <tbody id="values-table-body" align="right" >
            <?php
                if (!$lines){
                    echo $this->getNewLineContent(0,'NEW_LINE_ID_CODE');
                }else {
                    foreach($lines as $lineId=>$lineData){
                        echo $this->getLineContent($lineData);
                    }
                }
            ?>
        </tbody>
    </table>

</div>

<script type="text/javascript">
//<![CDATA[

    var ID_CODE = <?=$this->getMaxLineIndex()?>;
    var NEW_LINE_CODE = 'NEW_LINE_ID_CODE';

    function addValue(lineContent){
        content = Base64.decode(lineContent);
        $('values-table-body').insert(content.replaceAll(NEW_LINE_CODE,++ID_CODE));
    }

    function deleteLine(lineId){
        $('replacer-values-line-delete-'+lineId).value = true;
        var elements = $$('.for-delete-'+lineId);
        for (var i = 0; (element = elements[i]) != null; i++) {
            element.readOnly=true;
        }
        $('replacer-line-button-delete-'+lineId).hide();
        $('replacer-line-button-undelete-'+lineId).show();
    }
    function undeleteLine(lineId){
        $('replacer-values-line-delete-'+lineId).value = false;
        var elements = $$('.for-delete-'+lineId);
        for (var i = 0; (element = elements[i]) != null; i++) {
            element.readOnly=false;
        }
        $('replacer-line-button-delete-'+lineId).show();
        $('replacer-line-button-undelete-'+lineId).hide();
    }

//    Base 64 decode
    var Base64 = {
        // private property
        _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

        // public method for decoding
        decode : function (input) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;

            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            while (i < input.length) {

                enc1 = this._keyStr.indexOf(input.charAt(i++));
                enc2 = this._keyStr.indexOf(input.charAt(i++));
                enc3 = this._keyStr.indexOf(input.charAt(i++));
                enc4 = this._keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output = output + String.fromCharCode(chr1);

                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }

            }

            output = Base64._utf8_decode(output);

            return output;

        },

        // private method for UTF-8 decoding
        _utf8_decode : function (utftext) {
            var string = "";
            var i = 0;
            var c = c1 = c2 = 0;

            while ( i < utftext.length ) {

                c = utftext.charCodeAt(i);

                if (c < 128) {
                    string += String.fromCharCode(c);
                    i++;
                }
                else if((c > 191) && (c < 224)) {
                    c2 = utftext.charCodeAt(i+1);
                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                }
                else {
                    c2 = utftext.charCodeAt(i+1);
                    c3 = utftext.charCodeAt(i+2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }

            }

            return string;
        }

    }

    // Replaces all instances of the given substring.
    String.prototype.replaceAll = function(
        strTarget, // The substring you want to replace
        strSubString // The string you want to replace in.
        ){
        var strText = this;
        var intIndexOfMatch = strText.indexOf( strTarget );

        while (intIndexOfMatch != -1){
            strText = strText.replace( strTarget, strSubString )
            intIndexOfMatch = strText.indexOf( strTarget );
        }
        return( strText );
    }
    //]]>
</script>
